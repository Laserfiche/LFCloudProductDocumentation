<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:conditions="Default.Forms">
    <head>
    </head>
    <body>
        <h1>Events</h1>
        <p>
            <MadCap:concept term="Forms" />There are three basic types of events in <MadCap:variable name="DoNotTranslate.LF Forms" />: <b>start events</b>, <b>intermediate events</b>, and <b>end events</b>. Start events are the mechanism for starting a process, intermediate events happen during a process, and end events stop a process after it has finished running.</p>
        <p>Every process starts with one of the types of start events. </p>
        <h2 class="topicheading">Start events</h2>
        <p>The generic start event, called start event, is used when a process will begin when a user manually starts the process. Manually started processes do not start with a form submission. </p>
        <h3>Why use a generic start event?</h3>
        <p>Starting a process manually allows you to push content and forms to other users.</p>
        <h3>Configuring start events</h3>
        <ol>
            <li>Double-click the start event on the canvas to open its properties window. </li>
            <li>In the <b>Name</b> field, enter a name for the start event.</li>
            <li>In the <b>Event Type</b> drop-down list, select <b>Start Event</b> if it is not already selected.</li>
            <li>Click <b>Done</b> to close the window with your changes saved or <b>Cancel</b> to close the window and discard all changes.</li>
        </ol>
        <p class="ex"><b>Tip:</b> If you are building a process that begins with a form submission, use a <b>message event</b>. If you are building a form that is manually started and does not begin with a form submission, use a <b>start event</b>.</p>
        <h2 class="topicheading"><a name="Message"></a>Message start events</h2>
        <p>Message events start a process when a form is submitted. Unsurprisingly, this is the most commonly used start event in <MadCap:variable name="DoNotTranslate.LF Forms" /> and is incredibly useful for capturing information for use in a business process.</p>
        <h3>Why use a message start event?</h3>
        <p>If your business process begins when a form is submitted, use a message event. Form-based business processes will typically begin with a message start event.</p>
        <p class="ex"><b>Example:</b> When an employee submits a travel request form, the Travel System process starts and routes the form to the employee’s manager for review. </p>
        <h3>Configuring message start events</h3>
        <ol>
            <li>Double-click the message start event on the canvas to open its properties window.</li>
            <li>In the <b>Name</b> text box, name the message event.</li>
            <li>In the <b>Event Type</b> drop-down list, select <b>Message Start Event</b> if it is not already selected.</li>
            <li>In the <b>Starting form</b> drop-down list, specify the form that will be used to start the process.</li>
            <li><b>Optional:</b> Select the <b>Automatically load the next task if the same person is assigned to it</b> option if the next user task in the process is assigned to the same person as this start event and if you want the next user task's form to appear immediately after the user submits this user task's form. </li>
            <li>In the <b>Submit button label</b> text box, enter the text you want users to see on the submit button of the form. By default, users will see "Submit."</li>
            <li><b>Optional:</b> To edit the selected form, click <b>Edit</b>. Or, to create a new form for starting the process, click <b>New Form</b>.</li>
            <li>Select <b>Enable Honeypot CAPTCHA</b> to use Honeypot CAPTCHA on the starting form. Honeypot CAPTCHA creates an invisible field that, when filled out, disables form submission. This prevents spam bots from submitting the starting form as they usually fill every field.</li>
            <li>Select <b>Enable reCAPTCHA</b>&#160;to use reCAPTCHA on the starting form. reCAPTCHA forces users to correctly enter a series of characters in a field before the form can be submitted.</li>
            <li>In the <b>Save as Draft</b> tab, you can allow users to save form drafts for later by selecting the <b>Allow users to save incomplete forms for later</b> checkbox. This option is especially useful with longer forms that users might not be able to complete in one session. </li>
            <li>If the user selects to save a form as a draft, they will be emailed a link to finish their form.<ul><li>Authenticated Forms users will be prompted to send a link to the draft to the email address associated with their account. They can enter a different email address if they want the link to their form to be sent elsewhere. A copy of the form will also be available in the Drafts section of their Forms tasks. </li><li>Public users will be prompted to enter an email address and password. A link to the form will be sent to the email address specified, and they will use that email address and password to sign in to edit the form again. </li></ul></li>
            <li>In the <b>Thank You</b> tab, configure what will happen after users submit the form.<ul><li>Select <b>Show a thank you message</b> to configure a message to show the user in the rich text editor. (If you include a URL&#160;in your thank you message, it must begin with http:// or https://.) You can also select to show the submitted form to the user below the thank you message and to provide options for users to download or email the form for their personal records. </li><li>Select <b>Redirect to website</b> to specify a website that will appear after the user submits a form. </li></ul></li>
            <li>Click <b>Done</b> to close the window with your changes saved or <b>Cancel</b> to close the window and discard all changes.</li>
        </ol>
        <h2 class="topicheading"><a name="Timer"></a>Timer start events</h2>
        <p>
            <MadCap:snippetText src="Resources/Snippets/Timer Start Event Description.flsnp" />
        </p>
        <h3>Why use a timer start event?</h3>
        <p>If your business process should automatically begin on a particular date or schedule, use a timer start event.</p>
        <p class="ex"><b>Example:</b> Every month the manager of the sales department needs to fill out a form that rates each sales person's performance. A timer start event starts a process on the first of every month that emails a link to the form he needs to fill out. </p>
        <h3>Configuring timer start events</h3>
        <ol>
            <li>Double-click the timer start event on the canvas to open its properties window. </li>
            <li>In the <b>Name</b> text box, name the timer start event.</li>
            <li>In the <b>Repeat</b> drop-down list, specify the repeat frequency for this process. <ul><li>Select <b>Never</b> if the process should not repeat. </li></ul><ul><li>If you selected <b>Weekly</b> from the <b>Repeat</b> drop-down list, select the day of the week that the process will repeat on. If you select <b>Monthly</b> or <b>Yearly</b>, select if the process should repeat every 1, 2, 3, etc. months or years. </li></ul></li>
            <li>Next to <b>Start date</b>, select the day when the process will begin. In the following text box, select the time.</li>
            <li>If you selected a <b>Repeat</b> frequency other than <b>Never</b>, next to <b>End date</b>, specify the date and time when the process will end.</li>
            <li>Click <b>Done</b> to close the window with your changes saved or <b>Cancel</b> to close the window and discard all changes.</li>
        </ol>
        <h2 class="topicheading">Timer Intermediate events</h2>
        <p>Intermediate events happen during a process.</p>
        <ul>
            <li>Timer intermediate events used within the main process flow delay the flow.</li>
            <p class="ex"><b>Example:</b> During the initial customer interview, sales people fill out a Potential Customer form. If the lead is promising, they want to follow up with the customer five business days later. A timer catch event within the flow delays the process for five days after the Potential Customer form is submitted and then sends out an email reminding the sales person to follow up on the lead. </p>
            <li>Timer intermediate events attached to user tasks are used  to handle deadlines or time constraints and cause an alternate flow to be taken.</li>
            <p class="ex"><b>Example:</b> Susan takes care of screening all job applications her company receives. However, if she doesn't get to an application within five business days, then the application is sent to her assistant, Thomas, instead. </p>
        </ul>
        <h3>Using  timer intermediate events to delay the main process flow</h3>
        <ol>
            <li>Double-click the timer intermediate event on the canvas to open its properties window. </li>
            <li>In the <b>Name</b> text box, name the timer.</li>
            <li>In the <b>Wait</b> drop-down list, specify whether the process should wait <b>Until</b> a certain date, <b>For</b> a certain amount of time, or until another time <b>Based on a variable</b>.</li>
            <li>Based on your choice in step 3, you'll have to fill in more information about the length of time to wait. If you selected <b>For</b> or <b>Based on a variable</b>, the <b>Exclude weekends</b> checkbox will appear. Select this option if days that fall on weekends should be ignored when calculating the number of days to wait.</li>
            <li>Click <b>Done</b> to close the window with your changes saved or <b>Cancel</b> to close the window and discard all changes.</li>
        </ol>
        <h3>Using timer intermediate events to handle deadlines or time constraints</h3>
        <ol>
            <li>Right-click the user task you want to add a deadline to and click <b>Attach timer event</b>.</li>
            <li>Double-click the  timer that appears on the activity to open its properties window.</li>
            <li>In the <b>Name</b> text box, name the timer.</li>
            <li>
               In the <b>Wait</b> drop-down list, specify whether the process should wait <b>Until</b> a certain date, <b>For</b> a certain amount of time, or until another time <b>Based on a variable</b>.
            </li>
            <li>Based on the previous step, you'll have to fill in more information about the length of time to wait. If you selected <b>For</b> or <b>Based on a variable</b>, the <b>Exclude weekends</b> checkbox will appear. Select this option if days that fall on weekends should be ignored when calculating the number of days to wait.</li>
            <li>By default, the timer is set to not interrupt the attached activity. The timer's outflow path will be taken after the specified time period, but the activity will not be interrupted and can still be performed. You can choose to repeat the timer until the task is completed. </li>
            <li>Select the <b>Interrupt attached activity</b> option if, after the specified length of time, the process should interrupt the user task after the specified time period and take the timer's outflow path.</li>
            <li>Click <b>Done</b> to close the window with your changes saved or <b>Cancel</b> to close the window and discard all changes.</li>
        </ol>
        <p class="w"><b>Important:</b> Timer catch events can be attached to user tasks and sub-processes or used independently.</p>
        <h2 class="topicheading"><a name="Signal"></a>Signal throw and catch events</h2>
        <p>A signal intermediate event can broadcast a signal that another signal event will listen for. Upon receiving the signal, the signal event can act on the signal.  In BPMN, this is referred to as "throwing" and "catching" a signal. </p>
        <p>A signal intermediate event in a process flow broadcasts a signal. The signal event attached to a user task or sub-processlistens for the broadcast signal. When the signal is received, the process flow that starts from the attached signal event runs. </p>
        <div class="ex">
            <p><b>Example:</b> A process simultaneously routes a proposal form to a manager, an administrative assistant, and the accounting team for review. This parallel routing ensures proposals are processed by all three parties in a timely manner. However, in the case the manager denies a proposal, the administrative assistant and accounting team no longer need to continue their review. To account for this situation, a signal throw event is placed in the process flow that's taken if the manager denies the proposal. Corresponding signal catch events are attached to the administrative assistant's and accounting team's user tasks. If the signal throw event is reached, the signal catch events attached to the user tasks will cancel the user tasks and the process flow paths out of those signal catch events will be taken. Those process flows lead to email service tasks that alert the administrative assistant and accounting team that they no longer need to continue working on the proposal. </p>
            <p>
                <img src="Resources/Images/SignalEventEx.png" alt="Signale Event Example" title="This is the process for the example above" style="width: 774px;height: 429px;" />
            </p>
        </div>
        <p class="note"><b>Note:</b> The listening signal event will only receive a broadcast when the user task or sub-process is active or has not yet run. If the process has already moved past the user task or sub-process, the signal catch event will not be listening for a broadcast signal. </p>
        <p style="font-weight: bold;">To configure signal throw and catch events</p>
        <ol>
            <li>Drag a signal intermediate event onto the canvas and connect it to a spot in the process flow. </li>
            <li>Double-click the signal throw event to configure it. </li>
            <li>In the <b>Name</b> text box, provide a descriptive name for the signal.</li>
            <li>Under <b>Broadcast signal</b>, choose or create a signal that this event will send out when it's reached. Signals can be created by selecting <b>Create a signal</b> from the drop-down menu and typing a name in the dialog box that appears. Existing signals can be edited by selecting them in the drop-down menu and clicking <b>Edit</b>. </li>
            <li>Click <b>Done</b> when you have finished configuring this event.</li>
            <li>Right-click the user task or sub-process from which you want a process flow to run when the first signal intermediate event is reached.</li>
            <li>Select <b>Attach signal event</b>. </li>
            <li>Double-click the attached signal event.</li>
            <li>In the <b>Name</b> text box, provide a descriptive name for the event.</li>
            <li>Under <b>Listen to signal</b>, select the signal you configured in step 4. This attached signal event will now "listen" for the signal that is "broadcast" when the other signal intermediate event in the process is reached. It will run when it receives that signal. </li>
            <li>By default, the user task or sub-process will be interrupted and canceled when the attached signal catch event runs. Clear the <b>Interrupt the attached activity</b> if you want the user task or sub-process to continue running. </li>
            <p class="note"><b>Note:</b> The process flow out of the attached signal catch event will begin running as soon as the broadcast signal is received. It will not wait for the user task or sub-process to finish running. </p>
            <li>Click <b>Done</b> when you've finished configuring the signal intermediate event. </li>
            <li>Define a process flow that will be taken if this signal intermediate event is run. </li>
            <li>Continue to attach signal catch events to any tasks you also want alternate process flows to run from when the first signal throw event "broadcasts" its signal. </li>
        </ol>
        <h2 class="topicheading">End events</h2>
        <p>End events mark the end of a process. Once a process flow reaches an end event, the process flow ends. However, if there are other process flows still in progress, those will continue until they also reach an end event.</p>
        <h2 class="topicheading"><a name="Terminat"></a>Terminate end events</h2>
        <p>Once a process reaches a terminate end event, the entire process will be terminated including sub-processes and process flows that do not end in terminate end events.</p>
        <p><b>Related Topics</b>
        </p>
        <ul>
            <li><a href="Process-Modeler.htm" title="Click here to learn more." alt="Click here to learn more.">Creating a Process Diagram</a>
            </li>
        </ul>
    </body>
</html>