<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:conditions="Default.CSSJSCustomization">
    <head><title>CSS Introduction | Laserfiche Forms | Customizations</title>
        <meta name="description" content="Target specific elements of your form to customize using custom CSS." />
    </head>
    <body>
        <h1><a name="top"></a>Getting Started with CSS</h1>
        <p>Here we introduce the basic syntax behind CSS&#160;selectors. To understand how these work, you must already understand what a <a href="Customizing a Form with CSS and Javascript.htm#HTML">HTML element</a> is.</p>
        <p>In CSS, you can use a selector to identify the HTML element that you want to apply a style to. Such an assignment is known as a CSS rule. A CSS rule has the following structure:</p><pre xml:space="preserve"><code class="language-css">selector {property: value;}</code>  </pre>
        <p>Class names are one type of selector. Class names are preceded by a period. The following rule sets the text color of <i>all</i> file upload buttons on the form:</p><pre><code class="language-css">.fileuploader {color: white;}</code></pre>
        <p><code>Id</code> attributes are preceded by a <code>#</code> symbol rather than a period. The following is an example of a CSS&#160;rule for an <code>id</code> attribute:</p><pre xml:space="preserve"><code class="language-css">#tall {line-height: 19px;}</code></pre>
        <p>Existing CSS rules can be viewed and edited in the <b>CSS&#160;and JavaScript</b> tab of the form designer. In this tab, there is a <b>CSS</b> pane that displays all existing CSS&#160;rules. You can add new rules in this pane, delete existing rules, or modify existing rules.</p>
        <p>
            <img src="../Resources/Images/forms_css_pane.PNG" style="border-style: solid;border-width: 1px;" alt="The box for entering custom CSS." title="This custom CSS is taken from the CSS, Javascript, and Formula Examples process, which you can find in Solution Templates." />
        </p>
        <h2 class="topicheading"><a name="Compound"></a>Compound Selectors</h2>
        <p>You can combine multiple elements and attributes in your CSS rules to create compound selectors. Compound selectors allow you to specify elements that satisfy multiple conditions, or elements that satisfy any of a list of conditions.</p>
        <p>To apply styles to  elements that satisfy any of a list of conditions, list the selectors separated by commas. For example, the following CSS rule applies to the fields with ids <code>#q1</code> and <code>#q2</code>, setting the <b>display</b> property for both of them to <code>inline-block</code>. Any field that has an id of <code>#q1</code> or <code>#q2</code> will have that style applied to it.</p>
        <p><pre><code class="language-css">#q1, #q2 {display: inline-block;}</code></pre>
        </p>
        <p>Listing elements or attributes one after another separated by spaces (no commas) creates a hierarchical selector. First, the leftmost attribute is searched for. Then, within the descendants of elements matching the leftmost attribute, the second attribute from the left is searched for. Then, within the descendants of elements that satisfy the first two criteria, the third attribute from the left is searched for, and so on. For example, suppose you want to target the <b>label</b> element in the following snippet of HTML:</p><pre xml:space="preserve"><code class="language-markup">&lt;li attr="Display_Code_3" attrtype="checkbox" name="q1" id="q1"&gt;
  &lt;label class="cf-label" for="Field1" /&gt;
&lt;/li&gt;</code></pre>
        <p>Since the <b>label</b> element of interest is <i>inside</i> an element with id <code>q1</code>, you can assign a style to the <b>label</b> element as follows:</p><pre xml:space="preserve"><code class="language-css">#q1 label {width: 85px;}</code></pre>
        <p>To specify elements that satisfy multiple criteria, combine your selectors without any separating characters. This kind of compound selector looks for an element that matches <i>all</i> of the constituent selectors. The following rule selects all inputs that have the class <code>singleline</code>:</p><pre xml:space="preserve"><code class="language-css">input.singleline&#160;{ color: red; }</code></pre>
        <p>The difference between <code>input.singleline</code> and <code>input .singleline</code> is crucial. The former searches for <i>all</i> input elements that themselves have the class <code>singleline</code>. The latter searches the <i>descendants</i> of input elements for those elements that have the class <code>singleline</code>. An element is not a descendant of itself.</p>
        <p>It is important to note that the preview section of the <b>CSS&#160;and JavaScript</b> page shows CSS selectors for fields, but not for many of the other form elements that you can customize. To find the appropriate elements, classes, and identifiers that correspond to the aspects of a form you want to customize, <a href="Customizing a Form with CSS and Javascript.htm#Viewing">use your web browser</a> to look at the HTML markup of the form.</p>
        <h2 class="topicheading"><a name="Wrappers"></a>Wrappers</h2>
        <p>Wrappers are sometimes known as containers. Many elements of a form are contained in a wrapper, which means that the wrapper's properties can affect how the element is positioned (among other things). Often, the changes you desire require targeting the wrapper instead of, or in addition to, the elements inside the wrapper. For example, the following snippet of HTML is for two radio buttons, one for "Yes and one for "No":</p><pre xml:space="preserve"><code class="language-markup">&lt;div id="Field78"&gt;
  &lt;fieldset class="radio-checkbox-fieldset"&gt;
	&lt;span class="choice"&gt;
		&lt;input name="Field78" id="Field78-0" type="radio" value="Yes" vo="e"&gt;
		&lt;label class="form-option-label" for="Field78-0"&gt;Yes&lt;/label&gt;
	&lt;/span&gt;
	&lt;span class="choice"&gt;
		&lt;input name="Field78" id="Field78-1" type="radio" value="No" vo="e"&gt;
		&lt;label class="form-option-label" for="Field78-1"&gt;No&lt;/label&gt;
	&lt;/span&gt;
  &lt;/fieldset&gt;
&lt;/div&gt;</code></pre>
        <p>Each button and its label is inside a <b>span</b> element with the class <code>choice</code>. This wrapper can be targeted if you want to style the label and button together. You can also target individual elements within the <b>span</b> element. To target all radio button labels, you can use the CSS selector <code>.form-option-label</code> (this selector will also target checkbox labels). To target a specific button only, you can use the input ID, e.g. <code>#Field78-0</code> or <code>#Field78-1</code>.</p>
        <p>Checkboxes have a similar nested structure, with the label and the checkbox wrapped inside a <b>span</b> element:</p><pre xml:space="preserve"><code class="language-markup">&lt;span class="choice"&gt;
	&lt;input name="Field77" id="Field77-0" type="checkbox" value="choice_1" vo="e"&gt;
  	&lt;label class="form-option-label" for="Field77-0"&gt;choice 1&lt;/label&gt;
&lt;/span&gt;</code></pre>
        <p>A text input box consists of a wrapper containing the field label and another wrapper containing the input box. As we explain in <a href="CSS Text Customizations.htm">CSS Text Customizations</a>, You may sometimes need to change properties of the field wrapper in order to change the width of its input box. The following example of a single-line text field shows you how the nesting of elements works. The wrapper for the entire field is a <b>li</b> element with id <code>q6</code>. The <b>label</b> with class <code>cf-label</code> wraps the field label, while the <b>div</b> with class <code>cf-field</code> wraps the input box.</p><pre xml:space="preserve"><code class="language-markup">&lt;li attr="Single_Line_2" attrtype="text" name="q6" id="q6" class="ThreePerLine form-q form-focused"&gt;
  &lt;label class="cf-label" for="Field6"&gt;
    &lt;span&gt;&lt;span&gt;Three Per Line C&lt;/span&gt;&lt;/span&gt;
  &lt;/label&gt;
  &lt;div class="cf-field"&gt;
    &lt;input type="text" id="Field6" name="Field6" class="singleline cf-medium" maxlength="4000"&gt;
  &lt;/div&gt;
&lt;/li&gt;</code></pre>
        <h2 class="topicheading"><a name="Adding"></a>Adding a Class to a Field</h2>
        <p>If you want to apply a special style to some fields in your form while leaving other fields untouched, you can apply a custom class to the former fields in the form designer, then insert a CSS&#160;rule-set that defines the style for that class. For example, in <a href="CSS Text Customizations.htm#Multiple">one of our examples</a>, we assign a custom class to certain fields that allow two of them to be displayed on one line. Fields  that are not assigned that class will display as the default one field per line.</p>
        <p style="font-weight: bold;">To add a class to a field</p>
        <ol>
            <li style="font-weight: normal;">On the Layout page of the form designer, select the field you want to add a class to. Then, click <b>Edit</b>.</li>
            <li>Click the <b>Advanced</b> tab.</li>
            <li>In the <b>CSS class</b> field, enter the name of the class you want to apply to the field.</li>
        </ol>
        <h2 class="topicheading">Commonly Used CSS Selectors</h2>
        <p>These lists of selectors are not complete. If you are interested in an element that is not covered by these selectors, <a href="Customizing a Form with CSS and Javascript.htm#Viewing">look at the raw HTML of the form in a web browser</a> to determine possible selectors.</p>
        <h4><b>Selectors for Changing the Overall Form Appearance</b>
        </h4>
        <table id="myTable" summary="CSS selectors and what they apply to" cellspacing="0">
            <col class="TableStyle-PatternedRows-Column-Regular" />
            <col class="TableStyle-PatternedRows-Column-Regular" style="width: 470px;" />
            <thead>
                <tr>
                    <th class="tableheading">CSS Selector</th>
                    <th class="tableheading">Applies to</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="tabletext"><code>.cf-formwrap</code>
                    </td>
                    <td class="tabletext">The overall form container</td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-DarkerRows">
                    <td class="tabletext"><code>.cf-formtitle</code>
                    </td>
                    <td class="tabletext">The form title container</td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-LightRows">
                    <td class="tabletext"><code>.cf-form</code>
                    </td>
                    <td class="tabletext">The container for the body of a form</td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-DarkerRows">
                    <td class="tabletext"><code>.cf-buttons</code>
                    </td>
                    <td class="tabletext">The container for any form buttons (e.g., Submit, Approve, or Reject)</td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-LightRows">
                    <td class="tabletext"><code>.label</code>
                    </td>
                    <td class="tabletext">Every field label</td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-DarkerRows">
                    <td class="tabletext"><code>select</code>
                    </td>
                    <td class="tabletext">The input area for a drop-down list.</td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-LightRows">
                    <td class="tabletext"><code>.otherchoice</code>
                    </td>
                    <td class="tabletext">All "Other" choices for checkbox and radio button fields.</td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-DarkerRows">
                    <td class="tabletext"><code>#power</code>
                    </td>
                    <td class="tabletext">The container for the “Powered by Laserfiche Forms” footer</td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-LightRows">
                    <td class="tabletext"><code>#form-logo</code>
                    </td>
                    <td class="tabletext">The container for the form logo. You can add a logo to a form from the Style page</td>
                </tr>
                <tr class="TableStyle-PatternedRows-Body-DarkerRows">
                    <td class="tabletext"><code>.cf-pagination-tabs</code>
                    </td>
                    <td class="tabletext">The tabs representing different pages of paginated forms.</td>
                </tr>
            </tbody>
        </table>
        <h4><b>Selectors for Customizing the Appearance of Individual Fields or Categories of Fields</b>
        </h4>
        <table id="myTable1" style="margin-left: 0;margin-right: auto;" summary="CSS selectors and what they apply to">
            <caption style="font-weight: bold;">&#160;</caption>
            <col>
            </col>
            <col>
            </col>
            <thead>
                <tr>
                    <th width="20%">CSS Selector</th>
                    <th>Applies to</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><code>#q<i>N</i></code>(e.g. <code>#q1</code>, <code>#q2</code>, etc.)</td>
                    <td>The container of a field, which wraps both the field label and input area. This selector targets the field's ID&#160;attribute, as shown in the preview area of the <b>CSS and Javascript</b> page, where <i>N</i>&#160;is a number (q1, q2, q3, etc.).</td>
                </tr>
                <tr>
                    <td><code>#q<i>N</i> input</code> (e.g. <code>#q1 input</code>, <code>#q2 input</code>, etc.)</td>
                    <td>A single line, date, email, currency, number, address, checkbox, or radio button field's input box. (Checkboxes and radio buttons have an input box if the "other" option is selected.) It also targets the button for uploading a file or signing a form. </td>
                </tr>
                <tr>
                    <td><code>#q<i>N</i> textarea</code>  (e.g. <code>#q1 textarea</code>, <code>#q2 textarea</code>, etc.)</td>
                    <td>A multi-line field's input box.</td>
                </tr>
                <tr>
                    <td><code>#q<i>N</i> select </code> (e.g. <code>#q1 select</code>, <code>#q2 select</code>, etc.)</td>
                    <td>A drop-down field's input box. </td>
                </tr>
                <tr>
                    <td><code>#Field<i>N</i></code>(e.g. <code>#Field1</code>, <code>#Field2</code>, etc.)</td>
                    <td>A field's input box. If the field's ID attribute is <code>q1</code>, its input box ID attribute will be <code>Field1</code>.</td>
                </tr>
                <tr>
                    <td><code>#Field</code><i>N</i><code>_other_value</code>
                    </td>
                    <td>The "Other" input box for radio buttons and checkboxes.&#160;If the radio button or checkbox field has an ID of <code>q6</code>, then the id for the field's "Other"&#160;input box will be <code>Field6_other_value</code>.</td>
                </tr>
                <tr>
                    <td> <code>.cf-label</code></td>
                    <td>Field labels. Use compound selectors to apply styles to specific fields.</td>
                </tr>
                <tr>
                    <td><code>.cf-field</code>
                    </td>
                    <td>The container for a field’s input area.</td>
                </tr>
                <tr>
                    <td><code>.cf-small</code>
                    </td>
                    <td>The input box for fields that have their width set to <code>small</code> on the Edit page. By default, its width is a percentage of the .cf-field container’s width.</td>
                </tr>
                <tr>
                    <td><code>.cf-medium</code>
                    </td>
                    <td>The input box for fields that have their width set to <code>medium</code> on the Edit page. By default, its width is a percentage of the <code>.cf-field</code> container’s width.</td>
                </tr>
                <tr>
                    <td><code>.cf-large</code>
                    </td>
                    <td>The input box for fields that have their width set to <code>large</code> on the Edit page. By default, its width is a percentage of the <code>.cf-field</code> container’s width.</td>
                </tr>
                <tr>
                    <td><code>.cf-xlarge</code>
                    </td>
                    <td>The input box for fields that have their width set to <code>x-large</code> on the Edit page. By default, its width is a percentage of the <code>.cf-field</code> container’s width.</td>
                </tr>
                <tr>
                    <td><code>input[type="<i>inputType</i>"]</code> (e.g. <code>input[type="text"]</code>, <code>input[type="button"]</code>, <code>input[type="email"]</code>)</td>
                    <td>The input area for the specified input type. For text inputs, this would be the input box.</td>
                </tr>
                <tr>
                    <td><code>.Sign_Sig</code>
                    </td>
                    <td>The signature button of a signature field. For the wrappers around the button, use <code>.cf-field</code> and <code>#q<i>N</i></code>, as you would with non-signature fields.</td>
                </tr>
                <tr>
                    <td><code>input.user-error[type="checkbox"]</code>, <code>input.user-error[type="radio"]</code></td>
                    <td>Checkbox or radio buttons with invalid values or fields that are required and haven't been filled in.</td>
                </tr>
                <tr>
                    <td><code>input.user-error:not([type="checkbox"]):not([type="radio"])</code>
                    </td>
                    <td>Fields other than checkboxes or radio buttons with invalid values or fields that are required and haven't been filled in.</td>
                </tr>
            </tbody>
        </table>
        <p>For concrete examples of how these selectors are used in customizations, see <a href="CSS Text Customizations.htm">CSS Customizations for Fields, Titles, and Descriptions</a> and <a href="CSS Customizations for Buttons.htm">CSS Customizations for Buttons</a>.</p>
    </body>
</html>