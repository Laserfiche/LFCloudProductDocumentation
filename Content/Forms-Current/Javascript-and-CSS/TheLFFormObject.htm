<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title>The LFForm Object</title>
    </head>
    <body>
        <h1>The LFForm Object</h1>
        <p>The LFForm object provides a global interface for accessing Laserfiche form elements and events using JavaScript. Through simple functions, you can find a specific field, retrieve the field values, and update field contents. You also have access to events both at the individual field level as well as the form submission event.</p>
        <h2>LFForm Interfaces</h2>
        <h3 class="topicheading">findFields(predicate)</h3>
        <p>Finds fields that satisfy an arbitrary set of conditions. Any field attribute may be used to perform the search.</p>
        <ul>
            <li><b>Input:</b>
                <ul>
                    <li><i>predicate</i>: a function that takes in a field state and returns true for the fields you want to find, or false for fields to be excluded.</li>
                </ul>
            </li>
            <li><b>Output:</b>
                <ul>
                    <li>An array of fields that satisfy the <i>predicate</i>.</li>
                </ul>
            </li>
        </ul>
        <div class="ex">
            <p><b>Examples:</b>
            </p>
            <ul>
                <li style="font-style: italic;">LFForm.findFields(function(field) { return field.readonly === true; })</li>
                <li style="font-style: italic;">LFForm.findFields(function(field) { return field.settings.required === true; })</li>
                <li style="font-style: italic;">LFForm.findFields(function(field) { return field.settings.collectionId === null; })</li>
                <li style="font-style: italic;">LFForm.findFields(function(field) { return field.settings.collectionId !== null; })</li>
                <li style="font-style: italic;">LFForm.findFields(function(field) { return field.componentType === "SingleLine"; })</li>
                <li style="font-style: italic;">LFForm.findFields(function(field) { return field.settings.label?.startsWith('A') === true; })</li>
                <li style="font-style: italic;">LFForm.findFields(function(field) { return field.settings.label?.includes('test') === true; })</li>
                <li style="font-style: italic;">LFForm.findFields(function(field) { return field.componentType === "Radio"; })</li>
                <li style="font-style: italic;">LFForm.findFields(function(field) { return field.settings.collectionId !== null &amp;&amp; field.settings.required === true; })</li>
            </ul>
        </div>
        <h3 class="topicheading">getFieldValues(id)</h3>
        <p>Retrieves the value or values of the specified field.</p>
        <ul>
            <li><b>Input:</b>
                <ul>
                    <li><i>id</i>: An identification object. <ul><li class="ex"><b>Examples</b>: <br />{fieldId: 10, index: 1},<br />{variableId: "33d73380-c2de-4daa-8c63-7b4dc6491b20"}, <br />{variableName: "Single_Line"}...</li></ul></li>
                </ul>
            </li>
            <li><b>Output:</b>
                <ul>
                    <li>If only one field matches the identification object, the data of that field is returned.</li>
                    <li>If more than one field matches the identification object (field is repeatable or contains a collection), an array of data for all matching fields is returned.</li>
                </ul>
            </li>
        </ul>
        <div class="ex">
            <p><b>Examples:</b>
            </p>
            <ol>
                <li>For a single line field with <i>field ID: 10</i>, and with a current value of "Hello", <i>LFForm.getFieldValues({fieldId: 10})</i> returns "Hello".</li>
                <li>For a repeatable field with 3 rows, where each row has a single line with <i>fieldID: 10</i> and row values are: row 1, value "a"; row 2, value "b"; and row 3, value "c":<ul><li><i>LFForm.getFieldValues({fieldId: 10})</i> will return ["a", "b", "c"].</li><li><i>LFForm.getFieldValues({fieldId: 10, index: 0)</i> will return "a".</li></ul></li>
                <li>To print out the value of a field on the console:<ul><li>console.log(LFForm.getFieldValues({fieldId: 4}))</li></ul></li>
            </ol>
        </div>
        <h3 class="topicheading">setFieldValues(id,value)</h3>
        <p>Sets a field value for a specified field element.</p>
        <ul>
            <li><b>Input:</b>
                <ul>
                    <li><i>id</i>: An identification object.</li>
                    <li><i>value</i>: The value to set the field to.<p class="note"><b>Note:</b> Each field type will expect different value types. Refer to the table below.</p><p class="note"><b>Note:</b> If a field is read only, it will not allow the setting of it's value</p></li>
                </ul>
            </li>
            <li><b>Output:</b>
                <ul>
                    <li>A <i>promise</i> that resolves when the values are set or errors are returned.</li>
                </ul>
            </li>
        </ul>
        <table style="border-left-width: medium;border-left-color: #ffffff;border-right-width: medium;border-right-color: #ffffff;border-top-width: medium;border-top-color: #ffffff;border-bottom-width: medium;border-bottom-color: #ffffff;margin-left: 0;margin-right: auto;">
            <col width="30%" />
            <col width="70%" />
            <thead>
                <tr>
                    <th>Field Type</th>
                    <th>Value Type</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>SingleLine, MultiLine, Dropdown, RichText, Signature</td>
                    <td>String</td>
                </tr>
                <tr>
                    <td>Number</td>
                    <td>Number</td>
                </tr>
                <tr style="vertical-align: top;">
                    <td>Checkbox</td>
                    <td>
                        <p> An object with a "value" property. </p>
                        <p class="ex"><i>{value: ["Choice_1", "Choice_3]}, {value: ["Choice_1", "_other"], otherChoiceValue: "Hello"}</i>
                        </p>
                    </td>
                </tr>
                <tr style="vertical-align: top;">
                    <td>Radio</td>
                    <td>
                        <p>An object with a "value" property. </p>
                        <p class="ex"><i>{value: "Choice 2"}, {value: "_other", otherChoiceValue: "Hi"}</i>
                        </p>
                    </td>
                </tr>
                <tr style="vertical-align: top;">
                    <td>Geolocation</td>
                    <td>
                        <p>An object with a "latitude" and/or "longitude" property.  </p>
                        <p class="ex"><i>{latidude: 12, longitude: 34}</i>
                        </p>
                    </td>
                </tr>
                <tr style="vertical-align: top;">
                    <td>Address</td>
                    <td>
                        <p> An object with  "address1", "address2", "city", "country", "province" and/or "zipcode" properties. </p>
                        <p class="ex"><i>{address1: "3545 Long Beach Blvd", city: "Long Beach", province: "California"}</i>
                        </p>
                    </td>
                </tr>
                <tr style="vertical-align: top;">
                    <td>DateTime</td>
                    <td>
                        <p>An object with a "dateStr" property. A "timeStr" property is optional and only applied when Show Time is enabled. </p>
                        <p class="ex"><i>{dateStr: "2021-11-19", timeStr: "10:30:00 AM"}</i>
                        </p>
                    </td>
                </tr>
                <tr style="vertical-align: top;">
                    <td>Time</td>
                    <td>
                        <p>An object with a "timeStr" property. </p>
                        <p class="ex"><i>{timeStr: "11:30:25 PM"}</i>
                        </p>
                    </td>
                </tr>
                <tr style="vertical-align: top;">
                    <td colspan="2">Collection, Table, and FileUpload fields are not currently able to have field values set by JavaScript.</td>
                </tr>
            </tbody>
        </table>
        <div class="ex">
            <h4>setFieldValue Examples</h4>
            <p>The following examples illustrate setting field values :</p>
            <ol>
                <li>For a single line with field ID 10, using <i>LFForm.setFieldValues({fieldId: 10}, "hello")</i> will set the field to "hello".</li>
                <li>For a repeatable field with 3 rows, where each row has a single line with field ID 10:<ul><li><i>LFForm.setFieldValues({fieldId: 10}, "a")</i> will set the single line in every row to "a".</li><li><i>LFForm.setFieldValues({fieldId: 10, index: 0}, "hello")</i> will set the single line in first row to "hello".</li><li><i>LFForm.setFieldValues({fieldId: 10}, ["1", "2", "3"])</i> will set the single line in the first row to "1", the second row to "2", and the third row to "3".</li></ul></li>
            </ol>
            <p><b>Additional examples:</b>
            </p>
            <ol>
                <li>Single Line:<ul><li><i>LFForm.setFieldValues({fieldId: 45}, "Lisa")</i></li></ul></li>
                <li>Radio Button:<ul><li><i>LFForm.setFieldValues({fieldId: 8}, {value: "No"})</i></li></ul></li>
                <li>Checkbox:<ul><li><i>LFForm.setFieldValues({fieldId: 15}, {value: ["Choice_1", "_other"], otherChoiceValue: "Hello"})</i></li></ul></li>
                <li>Date:<ul><li><i>LFForm.setFieldValues({fieldId: 5}, {dateStr: "28-Nov-21"})</i></li></ul></li>
                <li>Time:<ul><li><i>LFForm.setFieldValues({fieldId: 31}, {timeStr: "11:30:25 PM"})</i></li></ul></li>
                <li>Geolocation:<ul><li><i>LFForm.setFieldValues({fieldId: 35}, {latitude: 3, longitude: 7})</i></li></ul></li>
                <li>Address:<ul><li><i>LFForm.setFieldValues({fieldId: 49}, {address1: "3545 Long Beach Blvd", city: "Long Beach", province: "California", zipcode: "12345"})</i></li></ul></li>
                <li>Currency<ul><li><i>LFForm.setFieldValues({fieldId: 21}, 1235.78)</i></li></ul></li>
                <li>Set one field by retrieving the value from another field:<ul><li><i>LFForm.setFieldValues({fieldId: 47}, LFForm.getFieldValues({fieldId: 4}))</i></li></ul></li>
                <li>Set a radio button to "Yes" and output the value to the console:<ul><li><i>LFForm.setFieldValues({fieldId: 8}, {value: "Yes"}).then(e =&gt; console.log(LFForm.getFieldValues({fieldId: 8})))</i></li></ul></li>
            </ol>
        </div>
        <h3 class="topicheading">subscribe(eventName, handler, options)</h3>
        <p>Subscribes to events.</p>
        <ul>
            <li><b>Input:</b>
                <ul>
                    <li><i>eventName</i>: Must be one of the following values; "formSubmission", "fieldChange" or "fieldBlur".</li>
                    <li><i>handler</i>: The function to call when the subscribed event is triggered.</li>
                    <li><i>options</i>: An identification object to identify the field subscribed to. You may also add an additional string similar to "handlerName" in the object to more easily identify the handler.</li>
                </ul>
            </li>
            <li><b>Output:</b> None.</li>
        </ul>
        <div class="ex">
            <p><b>Example:</b>
            </p>
            <p>To subscribe to a "fieldChange" event and log messages in the console when the field is changed (the handler name will also be used for <i>unsubscribe</i>.)</p>
            <ul>
                <li><i>LFForm.subscribe('fieldChange', function(){ console.log('fieldChange value changed - subscribe to field'); } ,{fieldId:2, handlerName: "subscribeHandler"});</i>
                </li>
            </ul>
        </div>
        <h3 class="topicheading">unsubscribe(eventName, options)</h3>
        <p>Unsubscribes from events.</p>
        <ul>
            <li><b>Input:</b>
                <ul>
                    <li><i>eventName</i>: Must be one of the following values; "formSubmission", "fieldChange" or "fieldBlur".</li>
                    <li><i>options</i>: An identification object to identify the handler</li>
                </ul>
            </li>
            <li><b>Output:</b> None.</li>
        </ul>
        <div class="ex">
            <p><b>Example:</b>
            </p>
            <p>To unsubscribe from a "fieldChange" event that has been subscribed to earlier.</p>
            <ul>
                <li><i>LFForm.unsubscribe('fieldChange',{handlerName: "subscribeHandler"});</i>
                </li>
            </ul>
        </div>
        <h3 class="topicheading">onFieldChange(handler, options)</h3>
        <p>Subscribes to the change event for specific fields.</p>
        <ul>
            <li><b>Input:</b>
                <ul>
                    <li><i>handler</i>: The function to call when a specific field changes.</li>
                    <li><i>options</i>: An identification object to identify field subscribed to.</li>
                </ul>
            </li>
            <li><b>Output:</b> None.</li>
        </ul>
        <div class="ex">
            <p><b>Example:</b>
            </p>
            <p>To change a field with ID 47 when the field with ID 4 changes:</p>
            <ul>
                <li><i>LFForm.onFieldChange(function(){ LFForm.setFieldValues({fieldId: 47}, LFForm.getFieldValues({fieldId: 4})) }, {fieldId: 4})</i>
                </li>
            </ul>
        </div>
        <h3 class="topicheading">onFieldBlur(handler, options)</h3>
        <p>Subscribes to the blur event for specific fields.</p>
        <ul>
            <li><b>input:</b>
                <ul>
                    <li><i>handler</i>: The function to call when a specific field blurs (loses focus).</li>
                    <li><i>options</i>: An identification object to identify the field to subscribe to.</li>
                </ul>
            </li>
            <li style="font-weight: normal;"><b>Output:</b> None.</li>
        </ul>
        <div class="ex">
            <p><b>Example:</b>
            </p>
            <p>To set the value of the field with ID 3 to the value of the field with ID 2 when the field with ID 2 loses focus:</p>
            <ul>
                <li><i>LFForm.onFieldBlur(function () {  LFForm.setFieldValues({fieldId: 3},  LFForm.getFieldValues({fieldId: 2}));}, {fieldId: 2});</i>
                </li>
            </ul>
        </div>
        <h3 class="topicheading">onFormSubmision(handler, options)</h3>
        <p>Subscribes to the formSubmission event.</p>
        <ul>
            <li><b>Input:</b>
                <ul>
                    <li><i>handler</i>: function to call when submission is triggered</li>
                    <li><i>options</i>: {handlerName: "submissionHandler1"}</li>
                </ul>
            </li>
            <li><b>Output:</b> A <i>promise</i> that resolves when the change is completed or errors are returned.</li>
        </ul>
        <p class="note"><b>Note:</b> If the handler returns an object with "error" property (for example {error: "There is something wrong on the form. Cannot submit."}), the submission is stopped and the error will be displayed as a toast on the page.</p>
        <div class="ex">
            <p><b>Example:</b>
            </p>
            <p>To show an error on submit when the value of the single line field with ID 2 is "no":</p>
            <ul>
                <li><i>LFForm.onFormSubmission(function(){if (LFForm.getFieldValues({fieldId:2 }) === "no")return {error: "There is an error. Do something before submitting again."};},{handlerName: "submissionHandler"});</i>
                </li>
            </ul>
        </div>
        <h3 class="topicheading">changeFieldSettings(idObject, changes)</h3>
        <p>Sets the specified settings of a specified field.</p>
        <ul>
            <li><b>Input:</b>
                <ul>
                    <li><i>idObject</i>: An identification object.</li>
                    <li><i>changes</i>: An object with the property to change as the key and the value as value.<p class="ex"><b>Example:</b> {label: "new label", description: "new text above", subtext: "new text below", placeholder: "new placeholder", autoCompleteValues: ["a", "b", "c"]}</p></li>
                </ul>
            </li>
            <li><b>Output:</b>
                <ul>
                    <li>A <i>promise</i> that resolves when the change is completed or errors are returned.</li>
                </ul>
            </li>
        </ul>
        <p class="note"><b>Note:</b> Currently supports the following field settings: label, description (and textAbove), subtext (and textBelow), tooltip, placeholder, autoCompleteValues (only for single line fields), and content (for customHTML fields, also supports HTMLContent).</p>
        <div class="ex">
            <p><b>Example:</b>
            </p>
            <p>To change the field label, text above, text below, placeholder, tooltip and auto suggestions of a single line field with ID 15.
			</p>
            <ul>
                <li><i>LFForm.changeFieldSettings({fieldId: 15},{label: "new label", description: "new text above", subtext: "new text below", placeholder: "new placeholder", tooltip: "new tooltip", autoCompleteValues: ["a", "b", "c"]});</i>
                </li>
            </ul>
        </div>
        <h3 class="topicheading" MadCap:conditions="Default.Do not include">changeFieldOptions(idObject, changes)</h3>
        <p MadCap:conditions="Default.Do not include">Changes the options for checkbox, radio button, and dropdown fields to the values specified by the <i>changes</i> parameter.</p>
        <ul>
            <li MadCap:conditions="Default.Do not include"><b>Input</b>
                <ul>
                    <li MadCap:conditions="Default.Do not include"><i>idObject</i>: An identification object.</li>
                    <li MadCap:conditions="Default.Do not include"><i>changes</i>:  An array of new options. This can be either a string array or an array in the format <i>{label: "new label", value: "newVal"}</i>.</li>
                </ul>
            </li>
            <li MadCap:conditions="Default.Do not include"><b>Output:</b>
                <ul>
                    <li MadCap:conditions="Default.Do not include">A <i>promise</i> that resolves when the change is completed or errors are returned.</li>
                </ul>
            </li>
        </ul>
        <div class="ex" MadCap:conditions="Default.Do not include">
            <p><b>Example:</b>
            </p>
            <p>To change the options for a radio button field with ID&#160;8.</p>
            <ul>
                <li><i>LFForm.changeFieldOptions({fieldId:8}, [{label: "a", value: "a"},{label: "Choice 1", value: "Choice 1"}]);</i>
                </li>
            </ul>
        </div>
        <h3 class="topicheading">changeFormSettings(changes)</h3>
        <p>Sets form-level settings.</p>
        <ul>
            <li><b>Input:</b>
                <ul>
                    <li><i>changes</i>: An object with the property to change as the key and their value as value.<p class="ex"><b>Example:</b> {title: "new form Title", description: "new form description"}</p></li>
                </ul>
            </li>
            <li><b>Output:</b>
                <ul>
                    <li>A <i>promise</i> that resolves when the change is completed or errors are returned.</li>
                </ul>
            </li>
        </ul>
        <p class="note"><b>Note:</b> Currently supports changing only the form title and description.</p>
        <div class="ex">
            <p><b>Example:</b>
            </p>
            <p>To change the Form title and description:</p>
            <ul>
                <li>LFForm.changeFormSettings({title: "new Form Title", description: "new form description"});</li>
            </ul>
        </div>
        <h3 class="topicheading">enableFields(idObject1, idObject2...)</h3>
        <p>Enables the field specified by each <i>idObject</i> provided.</p>
        <ul>
            <li><b>Input:</b>
                <ul>
                    <li><i>idObject</i>: One or more identification objects, separated by a comma. </li>
                </ul>
            </li>
            <li><b>Output:</b>
                <ul>
                    <li>A <i>promise</i> that resolves when the change is completed or an error is returned.</li>
                </ul>
            </li>
        </ul>
        <div class="ex">
            <p><b>Examples:</b>
            </p>
            <p>To enable a field which is disabled by a field rule:</p>
            <ul>
                <li>LFForm.enableFields({fieldId: 11});</li>
            </ul>
            <p>To enable several fields:</p>
            <ul>
                <li>LFForm.enableFields({fieldId: 2},{fieldId: 3});</li>
            </ul>
        </div>
        <h3 class="topicheading">disableFields(idObject1, idObject2...)</h3>
        <p>Disables the field specified by each <i>idObject</i> provided.</p>
        <ul>
            <li><b>Input:</b>
                <ul>
                    <li><i>idObject</i>: One or more identification objects, separated by a comma. </li>
                </ul>
            </li>
            <li><b>Output:</b>
                <ul>
                    <li>A <i>promise</i> that resolves when the change is completed or an error is returned.</li>
                </ul>
            </li>
        </ul>
        <div class="ex">
            <p><b>Examples:</b>
            </p>
            <p>To disable a field which is editable:</p>
            <ul>
                <li>LFForm.disableFields({fieldId: 12});</li>
            </ul>
            <p>To disable several fields:</p>
            <ul>
                <li>LFForm.disableFields({fieldId: 2},{fieldId: 3});</li>
            </ul>
        </div>
        <h3 class="topicheading">showFields(idObject1, idObject2...)</h3>
        <p>Shows the field specified by each <i>idObject</i> provided.</p>
        <ul>
            <li><b>Input:</b>
                <ul>
                    <li><i>idObject</i>: One or more identification objects, separated by a comma.</li>
                </ul>
            </li>
            <li><b>Output:</b>
                <ul>
                    <li>A <i>promise</i> that resolves when the change is completed or an error is returned.</li>
                </ul>
            </li>
        </ul>
        <div class="ex">
            <p><b>Examples:</b>
            </p>
            <p>To show a field:</p>
            <ul>
                <li>LFForm.showFields({fieldId: 13});</li>
            </ul>
            <p>To show several fields:</p>
            <ul>
                <li>LFForm.showFields({fieldId: 2},{fieldId: 3});</li>
            </ul>
        </div>
        <h3 class="topicheading">hideFields(idObject1, idObject2...)</h3>
        <p>Hides the field specified by  each <i>idObject</i> provided.</p>
        <ul>
            <li><b>Input:</b>
                <ul>
                    <li><i>idObject</i>: One or more identification objects, separated by a comma.</li>
                </ul>
            </li>
            <li><b>Output:</b>
                <ul>
                    <li>A <i>promise</i> that resolves when the change is completed or an error is returned.</li>
                </ul>
            </li>
        </ul>
        <div class="ex">
            <p><b>Examples:</b>
            </p>
            <p>To hide a field:</p>
            <ul>
                <li>LFForm.hideFields({fieldId: 14});</li>
            </ul>
            <p>To hide several fields:</p>
            <ul>
                <li>LFForm.hideFields({fieldId: 2},{fieldId: 3});</li>
            </ul>
        </div>
        <h3 class="topicheading">addRow(idObject, count)</h3>
        <p>Add the specified number of rows to a table or collection.</p>
        <ul>
            <li><b>Input:</b>
                <ul>
                    <li><i>idObject</i>: An identification object.</li>
                    <li><i>count</i>: The number of rows to add.</li>
                </ul>
            </li>
            <li><b>Output:</b>
                <ul>
                    <li>A <i>promise</i> that resolves when the change is completed or an error is returned.</li>
                </ul>
            </li>
        </ul>
        <h3 class="topicheading">addSet(idObject, count)</h3>
        <p>Adds the specified number of sets to a table or collection.</p>
        <ul>
            <li><b>Input:</b>
                <ul>
                    <li><i>idObject</i>: An identification object.</li>
                    <li><i>count</i>: The number of sets to add.</li>
                </ul>
            </li>
            <li><b>Output:</b>
                <ul>
                    <li>A <i>promise</i> that resolves when the change is completed or an error is returned.</li>
                </ul>
            </li>
        </ul>
        <h3 class="topicheading">deleteRow(idObject, index1, index2...)</h3>
        <p>Delete the row at the specified index locations from a a table or collection.</p>
        <ul>
            <li><b>Input:</b>
                <ul>
                    <li><i>idObject</i>: An identification object.</li>
                </ul>
                <ul>
                    <li><i>index</i>: One or more indexes of the row(s) to remove, separated by a comma.</li>
                </ul>
            </li>
            <li><b>Output:</b>
                <ul>
                    <li>A <i>promise</i> that resolves when the change is completed or an error is returned.</li>
                </ul>
            </li>
        </ul>
        <h3 class="topicheading">deleteSet(idObject, index1, index2...)</h3>
        <p>Deletes the set at the specified index locations from a table or collection.</p>
        <ul>
            <li><b>Input:</b>
                <ul>
                    <li><i>idObject</i>: An identification object.</li>
                    <li><i>index</i>: One or more indexes of the set(s) to remove, separated by a comma.</li>
                </ul>
            </li>
            <li><b>Output:</b>
                <ul>
                    <li>A <i>promise</i> that resolves when the change is completed or an error is returned.</li>
                </ul>
            </li>
        </ul>
        <div class="ex">
            <p><b>Examples for addSet, addRow, deleteSet and deteRow:</b>
            </p>
            <p>To add two sets to a collection:</p>
            <ul>
                <li>LFForm.addSet({fieldId: 1}, 2);</li>
            </ul>
            <p>To add two rows to a table:</p>
            <ul>
                <li>LFForm.addRow({fieldId: 1}, 2);</li>
            </ul>
            <p>To delete the first set of a collection:</p>
            <ul>
                <li>LFForm.deleteSet({fieldId: 1}, 0);</li>
            </ul>
            <p>To delete the first row of a table:</p>
            <ul>
                <li>LFForm.deleteRow({fieldId: 1}, 0);</li>
            </ul>
        </div>
        <h3 class="topicheading">onLookupTrigger(handler, options)</h3>
        <p>This event is triggered when a look up call is about to be started.</p>
        <ul>
            <li><b>Input:</b>
                <ul>
                    <li><i>handler</i>: The function to call when a lookup completes.</li>
                    <li><i>options</i>: A lookupRuleID.</li>
                </ul>
            </li>
            <li><b>Output:</b>
                <ul>
                    <li>If {cancelLookup: true} is returned, the lookup call will be canceled.</li>
                </ul>
            </li>
        </ul>
        <h3 class="topicheading">onLookupDone(handler, options)</h3>
        <p>This event is triggered when a look up call is completed.</p>
        <ul>
            <li><b>Input:</b>
                <ul>
                    <li><i>handler</i>: The function to call when a lookup completes.</li>
                    <li><i>options</i>: A lookupRuleID.</li>
                </ul>
            </li>
            <li><b>Output:</b>
                <ul>
                    <li>A <i>promise</i> that resolves when the <i>handler</i> has completed or an error is returned.</li>
                </ul>
            </li>
        </ul>
        <div class="ex">
            <p><b>Examples for onLookupTrigger and onLookupDone:</b>
            </p>
            <p>When lookup rule 1 is triggered, it will log a message in the console (the lookupRuleId is the id of the lookup rule in the lookup rule list):</p>
            <ul>
                <li>LFForm.onLookupTrigger(function () { console.log('lookup rule 1 is triggered'); }, {lookupRuleId: 1});</li>
            </ul>
            <p>When lookup rule 1 is done, it will log a message in the console (the lookupRuleId is the id of the lookup rule in the lookup rule list):</p>
            <ul>
                <li>LFForm.onLookupDone(function () { console.log('lookup rule 1 is done'); }, {lookupRuleId: 1});</li>
            </ul>
        </div>
    </body>
</html>