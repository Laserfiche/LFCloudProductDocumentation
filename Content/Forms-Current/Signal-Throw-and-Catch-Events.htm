<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title>Signal Throw and Catch Events | Laserfiche Forms | Process Automation</title>
        <meta name="description" content="Use these events in your business process to influence other parts of your process based on what happens in one part of the process." />
    </head>
    <body>
        <h1>Signal Throw and Catch Events</h1>
        <p>Use signal throw and catch events when the outcomes of certain tasks should determine which of several possible <a href="Key-Concepts-in-Forms.htm#Process" title="Click here to learn more." alt="Click here to learn more.">process flows</a> in a process occur. Unlike <a href="Gateways.htm" title="Click here to learn more." alt="Click here to learn more.">gateways</a>, signal throw and catch events can start or stop other process flows depending on events in a different branch of the process.</p>
        <p>A signal throw event can broadcast a signal that a signal catch event will listen for. Upon receiving the signal, the signal catch event can act on the signal.  In <a href="http://www.bpmn.org/" target="_blank">BPMN</a>, this is referred to as "throwing" and "catching" a signal. When the signal is received, the process flow that starts from the signal catch event runs. </p>
        <p>In the process diagram, signal throw events are represented by the following symbol: <img src="../Resources/Forms Images/signal-throw-icon.PNG" />. Signal catch events are represented by the following symbol: <img src="../Resources/Forms Images/signal-catch-icon.PNG" /></p>
        <div class="ex">
            <p><b>Example:</b> A process simultaneously routes a proposal form to a manager, an administrative assistant, and the accounting team for review. This parallel routing ensures proposals are processed by all three parties in a timely manner. However, if the manager rejects a proposal, the administrative assistant and accounting team no longer need to continue their review. To account for this situation, a signal throw event is placed in the process flow that's taken if the manager rejects the proposal. Corresponding signal catch events are attached to the administrative assistant's and accounting team's user tasks. If the signal throw event is reached, the signal catch events attached to the user tasks will cancel the user tasks and the process flow paths out of those signal catch events will be taken. Those process flows lead to email service tasks that alert the administrative assistant and accounting team that they no longer need to continue working on the proposal. </p>
            <p>
                <MadCap:toggler targets="diag1">Diagram 1:&#160;Main process.</MadCap:toggler> </p>
            <p MadCap:targetName="diag1">
                <img src="Resources/Images/signalCatchThrowProcessDiagram.png" style="max-height: auto;max-width: 100%;" />
            </p>
            <p>
                <MadCap:toggler targets="diag2">Diagram 2:&#160;Approval subprocess.</MadCap:toggler>
            </p>
            <p MadCap:targetName="diag2">
                <img src="Resources/Images/signalCatchThrowSubprocessDiagram.png" style="max-width: 100%;max-height: auto;" />
            </p>
        </div>
        <p class="note"><b>Note:</b> The listening signal catch event will only receive a broadcast when the user task or sub-process is active or has not yet run. If the process has already moved past the user task or sub-process, the signal catch event will not be listening for a broadcast signal. </p>
        <p style="font-weight: bold;">To configure signal throw and catch events</p>
        <ol>
            <li>Drag a signal throw event onto the canvas and connect it to a spot in the process flow. </li>
            <li>Double-click the signal throw event to configure it. </li>
            <li>In the <b>Name</b> text box, provide a descriptive name for the signal.</li>
            <li>Under <b>Description</b>, describe what the event does in the process.</li>
            <li>Under <b>Broadcast signal</b>, choose or create a signal that this event will send out when it's reached. Signals can be created by selecting <b>Create a signal</b> from the menu and typing a name in the dialog box that appears. Existing signals can be edited by selecting them in the menu and clicking <b>Edit</b>. </li>
            <li>Right-click the user task or sub-process from which you want a process flow to run when the first signal intermediate event is reached.</li>
            <li>Select <b>Attach signal event</b>. </li>
            <li>Double-click the attached signal event.</li>
            <li>In the <b>Name</b> text box, provide a descriptive name for the event.</li>
            <li>Under <b>Description</b>, describe what the event does in the process.</li>
            <li>Under <b>Listen to signal</b>, select the signal you configured in step 4. This attached signal event will now "listen" for the signal that is "broadcast" when the other signal intermediate event in the process is reached. It will run when it receives that signal. </li>
            <li>By default, the user task or sub-process will be interrupted and canceled when the attached signal catch event runs. Select the <b>Do not interrupt the attached activity</b> if you want the user task or sub-process to continue running. </li>
            <p class="note"><b>Note:</b> The process flow out of the attached signal catch event will begin running as soon as the broadcast signal is received. It will not wait for the user task or sub-process to finish running. </p>
            <li>When you are done, define a process flow that will be taken if this signal intermediate event is run. </li>
            <li>Continue to attach signal catch events to any tasks you also want alternate process flows to run from when the first signal throw event "broadcasts" its signal. </li>
        </ol>
    </body>
</html>