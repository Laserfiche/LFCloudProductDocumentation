<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title>Error Events | Laserfiche Forms | Process Automation</title>
        <meta name="description" content="Use error events to start or stop process flows based on whether errors occur." />
    </head>
    <body>
        <h1>Error Events</h1>
        <p>Error events are a class of <a href="Events.htm" title="Click here to learn more." alt="Click here to learn more.">events</a> that start, stop, or change process flows based on whether certain custom errors occur. These custom errors are defined by the person designing the process. For example, you may want to define an error as happening when a <a href="Variables.htm" title="Click here to learn more." alt="Click here to learn more.">variable's</a> value falls outside a certain range. Software errors, such as failing to connect to a database or failing to find a user, cannot be acted on by error events.</p>
        <h2 class="topicheading">Error Start Event</h2>
        <p>    Error start events are represented by the following symbol:<img src="Resources/Images/error_start_event.PNG" /></p>
        <p>Error start events start a process flow based on a  custom error generated from an error end event.</p>
        <p><b>To configure an error start event</b>
        </p>
        <ol>
            <li>Double-click the error start event on the canvas to open its properties window.</li>
            <li>Under <b>Catch</b>, configure whether to catch any custom errors generated by error end events or to catch a specific custom error.</li>
        </ol>
        <h2 class="topicheading">Error End Event</h2>
        <p>Error end events are represented by the following symbol:<img src="Resources/Images/error_end_event.PNG" /></p>
        <p>Error end events generate a custom error and then end the current process flow. The custom error can be caught by error start events and error catch events.</p>
        <p>Custom errors that are not caught by an error start event or error catch event will not terminate the process flow, but will be logged in the instance log.</p>
        <h2>Using Error Start and End Events</h2>
        <p>The following example shows how you can use error start events and error end events in a process. In a sales process, the initial submission of a form containing details of a potential sale starts three different process flows. In the first flow, the legal department reviews the prospective sale for any issues. In the second flow, the sales department verifies the client's information. If the client's information is not updated in the Customer Relations Management (CRM) system, an error end event happens. A third process flow starts off a proof-of-concept (POC)&#160;demonstration.</p>
        <p>
            <img src="Resources/Images/salesprocess_error-end-event.PNG" style="width: 678px;height: 439px;border-left-style: solid;border-left-width: 1px;border-left-color: ;border-right-style: solid;border-right-width: 1px;border-right-color: ;border-top-style: solid;border-top-width: 1px;border-top-color: ;border-bottom-style: solid;border-bottom-width: 1px;border-bottom-color: ;" alt="Part of a process showing an error end event." title="The error end event is particularly useful when caught by an error start event elsewhere." />
        </p>
        <p>When the error end event in the second process flow occurs, it is caught by an error start event in a separate process flow. This flow leads to the account manager being notified of the outdated client information in the CRM system.</p>
        <p>
            <img src="Resources/Images/salesprocess_error-start-event.PNG" style="width: 401px;height: 102px;border-left-style: solid;border-left-width: 1px;border-left-color: ;border-right-style: solid;border-right-width: 1px;border-right-color: ;border-top-style: solid;border-top-width: 1px;border-top-color: ;border-bottom-style: solid;border-bottom-width: 1px;border-bottom-color: ;" alt="Sample process flow showing use of an error start event." title="This process flow is part of the same process as the process flow shown in the previous diagram." />
        </p>
        <h2 class="topicheading">Error Catch Event</h2>
        <p>In the previous example, we did not use error catch events because our process did not use sub-processes. Error catch events can be attached to a sub-process to listen for custom errors generated by an error end event. The error catch event always interrupts the entire sub-process to which it is attached. In the following example, we have a sub-process that leads to an error end event  when a form with invalid field values is submitted. </p>
        <p>
            <img src="Resources/Images/ErrorEventSample1.png" style="width: 757px;height: 349px;" alt="Sub-process containing an error end event" title="A later diagram will show the larger process this sub-process is embedded in." />
        </p>
        <p>The sub-process is embedded in a main process, as depicted in the next diagram, and has an error catch event attached to it. After being attached to a process, error catch events look as follows:&#160;</p>
        <p>
            <img src="Resources/Images/errorcatchevent.png" style="width: 112px;height: 73px;" />
        </p>
        <p>The error catch event detects when the error end event in the sub-process occurs (that is, when a form with invalid field values is submitted). When this happens, the error catch event triggers the error start event, which terminates the entire sub-process and starts a new process flow.</p>
        <p>
            <img src="Resources/Images/errorEventSample2.png" style="width: 755px;height: 414px;" alt="Larger process containing the sub-process with the error catch event." title="The error start event catches the error catch event that is attached to the sub-process." />
        </p>
        <p>If you are not looking for an error inside a sub-process, you do not need to use an error catch event. For errors within the main process, an error end event together with an error start event (as demonstrated in our first example) are enough. The error start event will respond directly to the error end event without having to wait for a signal from an error catch event.</p>
        <p><b>To attach an error catch event</b>
        </p>
        <ol>
            <li>Right-click a sub-process and click <b>Attach error event</b>.</li>
            <li>Double-click the error catch event that appears on top of the sub-process to view its properties window.</li>
            <li>Under <b>Catch</b>, configure whether to catch any custom errors generated by error end events or to catch a specific custom error.</li>
        </ol>
    </body>
</html>