<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="5" MadCap:lastHeight="3670" MadCap:lastWidth="981" MadCap:conditions="Default.For Next Version">
    <head><title>JavaScript Team Filters | Laserfiche Forms | Process Automation</title>
        <meta name="description" content="JavaScript filters allow you to assign tasks by team roles in more complex ways. Our sample JavaScript filters show you how." />
    </head>
    <body>
        <h1>
            <MadCap:concept term="Forms" />JavaScript Team Filters </h1>
        <p>You can automatically assign tasks to subsets of <a href="../../Forms-Deprecated/Teams.htm" title="Click here to learn more." alt="Click here to learn more.">teams</a> with a <a href="User-Tasks.htm#The2" title="Click here to learn more." alt="Click here to learn more.">user task</a>. By <a href="../../Forms-May-Include/Using-Team-Filters.htm" title="Click here to learn more." alt="Click here to learn more.">adding a filter</a> to the team, you can assign the task to users who have a specific role on the team or who share some other criteria. JavaScript expressions let you customize the filter to meet your exact needs. </p>
        <p>When creating your JavaScript filter there are few things to keep in mind:</p>
        <ul>
            <li> As you enter methods from the drop-down menu, they will be prefaced with the "team" object. This object is created before your script runs and references the team you've assigned the task to. </li>
            <li>If you want your filter to use multiple methods, for example to get users who didn't submit a form in the previous step and that have the Reviewer role, use one of the <a href="#Helper" title="Click here to learn more." alt="Click here to learn more.">helper methods</a> listed below to combine them. </li>
            <li>Your finished script must include an expression that sets the value of the <b>$result</b> variable (which is declared before your script runs).  The value in the <b>$result</b> variable should be an array of team member objects, created by the methods in the drop-down menu and the helper methods listed below.  Thus, you will want to set the value of the <b>$result</b> variable to the output from one of these methods.  For example: $result = team.getAllMembers() </li>
        </ul>
        <h2 class="topicheading">Methods</h2>
        <p>Use the following methods to <a href="../../Forms-May-Include/Using-Team-Filters.htm" title="Click here to learn more." alt="Click here to learn more.">create your filter</a>.</p>
        <p><b>Parameters:</b> Possible parameters are noted in italics. If an expression takes parameters, you can pass multiple parameters in a comma separated list and the expression will return team members who satisfy any of the parameters. </p>
        <ul>
            <li><b>findMembersByRole('<i>RoleName</i>'):</b> 	Returns the team members (including managers and non-managers) who have  at least one of  the roles specified. If you click inside the parentheses, a list of available roles will appear for you to choose from. </li>
            <div class="ex">
                <p><b>Example:</b> To return all the team members who have the Admin or Assistant Admin roles, use the following JavaScript snippet:</p>
                <div class="Code">
                    <p>$result = team.findMembersByRole('Admin', 'Assistant Admin');</p>
                </div>
            </div>
            <li><b>excludeRoles('</b><i style="font-weight: bold;">RoleName</i><b>');</b> Returns the team members who do not have the specified roles. If you click inside the parentheses, a list of available roles will appear for you to choose from. </li>
            <li><b>findTaskLastSubmitters(<i>StepID</i>);</b> Returns the team member who submitted a form the last time the specified step ran. </li>
            <div class="ex">
                <p><b>Tip:</b> The step ID is passed in as the parameter. Step IDs are unique in each process, and will not change even if the step is exported, imported, or copied. You can <a href="User-Task-Variables.htm#Finding" title="Click here to learn more." alt="Click here to learn more.">find the step ID</a> in a task's properties pane.</p>
            </div>
            <li><b>findTaskSubmitters(</b><i style="font-weight: bold;">StepID</i><b>);</b> Returns the team members who submitted a form on the specified step. If the step ran multiple times in the process, this expression will return a list of all the team members who submitted a form in this step. </li>
            <li><b>excludeTaskLastSubmitters(<i>StepID</i>);</b> Returns the team members who did not submit a form the last time the specified step ran. </li>
            <div class="ex">
                <p><b>Example:</b> The user who approved the form in the last Approval step should not be able to approve the form in this user task as well. To return the team members who did not submit a form the last time the Approval step ran, use the following JavaScript snippet. </p>
                <div class="Code">
                    <p>$result = team.excludeLastTaskSubmitters(5); </p>
                </div>
                <p>In this example, the step's ID number is 5.</p>
            </div>
            <li><b>excludeTaskSubmitters(</b><i style="font-weight: bold;">StepID</i><b>);</b> 	Returns the team members who did not submit a form on the specified step. If the step ran multiple times in the process, this expression will return a list of all the team members who did not submit a form in this step. </li>
            <li><b>getAllMembers();</b> All users on the team. (This expression in not shown on the list of expressions when creating a filter.)</li>
            <li><b>findTeamMembersByUserName(<i>Username</i>);</b> Finds one or more users in team using the username. To specify more than one user, separate each user with a comma. You can use this method to assign a task to only the team members with the specified username.
            </li>
            <li><b>findTeamMembersByDisplayName(<i>DisplayName</i>);</b> Finds one or more users in team using the display name. To specify more than one user, separate each user with a comma. You can use this method to assign a task to only the team members with the specified display name.            </li>
        </ul>
        <p class="note"><b>Note:</b> When you test JavaScript that uses TaskSubmitter methods, it will assume the previous task has not run. Thus, during the test,  no team members will be returned for findTaskSubmitters and all team members will be returned for excludeTaskSubmitters. </p>
        <h2 class="topicheading"><a name="Helper"></a>Helper methods</h2>
        <p>To use more than one of the expressions listed above in a single filter, you will need to assign each expression to a variable and then pass those variables to a helper method. Alternatively, you can directly pass the expressions as helper method parameters. </p>
        <p><b>Parameters:</b> The union and intersection helper methods can take any number of parameters. The difference method requires two parameters. </p>
        <ul>
            <li><b>$util.union</b> Returns the team members that are in either of the lists passed as parameters. </li>
            <div class="ex">
                <p><b>Example:</b>  To return all the team members that are either Admins or Analysts, use one of the following JavaScript snippets:</p>
                <div class="Code">
                    <p>var admins = team.findMembersByRole('Admin');</p>
                    <p>var analysts = team.findMembersByRole('Analyst');</p>
                    <p>$result = $util.union(admins, analysts);</p>
                </div>
                <p>OR</p>
                <div class="Code">
                    <p>$result = $util.union(team.findMembersByRole('Admin'), team.findMembersByRole('Analyst'));</p>
                </div>
            </div>
            <li><b>$util.intersection</b> Returns the team members that are in both of the lists passed as parameters.</li>
            <div class="ex">
                <p><b>Example:</b> To return all the team members that have both the Specialist and Reviewer roles, use one of the following JavaScript snippets: </p>
                <div class="Code">
                    <p>var specialists = team.findMembersByRole('Specialist');</p>
                    <p>var reviewers = team.findMembersByRole('Reviewer');</p>
                    <p>$result = $util.intersection(specialists, reviewers);</p>
                </div>
                <p>OR</p>
                <div class="Code">
                    <p>$result = $util.intersection(team.findMembersByRole('Specialist'), team.findMembersByRole('Reviewer'));</p>
                </div>
            </div>
            <li><b>$util.difference</b> Returns the team members that are in the list that is passed as the first parameter but not in the list passed as the second parameter. </li>
            <div class="ex">
                <p><b>Example:</b> To return all the analysts who do not have the Accountant role. </p>
                <div class="Code">
                    <p>var analysts = team.findMembersByRole('Analyst');</p>
                    <p>var accountants = team.findMembersByRole('Accountant');</p>
                    <p>$result = $util.difference(analysts, accountants);</p>
                </div>
                <p>OR</p>
                <div class="Code">
                    <p>$result = $util.difference(team.findMembersByRole('Analyst'), team.findMembersByRole('Accountant'));</p>
                </div>
            </div>
            <p>You can combine helper methods to create even more nuanced filters.</p>
            <div class="ex">
                <p><b>Example:</b> To return all the administrators, and return all team members that have both the Specialist and Reviewer roles, use one of the following JavaScript snippets:</p>
                <div class="Code">
                    <p>var specialists = team.findMembersByRole('Specialist');</p>
                    <p>var reviewers = team.findMembersByRole('Reviewer');</p>
                    <p>var bothRoles = $util.intersection(specialists, reviewers);</p>
                    <p>var admins = team.findMembersByRole('Admin');</p>
                    <p>$result = $util.union(bothRoles, admins);</p>
                </div>
                <p>OR</p>
                <div class="Code">
                    <p>$result = $util.union($util.intersection(team.findMembersByRole('Specialist'), team.findMembersByRole('Reviewer')), team.findMembersByRole('Admin'));</p>
                </div>
            </div>
            <h2 class="topicheading">Advanced example</h2>
            <p>You can combine these JavaScript expressions and helper methods with additional JavaScript functions to account for more complex situations.</p>
            <div class="ex">
                <p><b>Example:</b> You want to assign a task back to the people who were assigned the task the last time. If no one was assigned to the task previously, then you want to assign the task to the team. You can use the following JavaScript, replacing "6" with the step's ID number. </p>
                <div class="Code">
                    <p>var assignedTo;</p>
                    <p>assignedTo=team.findTaskLastSubmitters(6);</p>
                    <p>if (Object.keys(assignedTo).length == 0)</p>
                    <p>$result=team.getAllMembers();</p>
                    <p>else</p>
                    <p>$result=assignedTo;</p>
                </div>
            </div>
        </ul>
    </body>
</html>