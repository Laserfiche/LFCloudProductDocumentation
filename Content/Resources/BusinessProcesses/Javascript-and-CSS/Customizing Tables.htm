<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:conditions="Default.CSSJSCustomization">
    <head><title>Customizing Tables with JavaScript | Laserfiche Forms</title>
        <meta name="description" content="Target specific rows in a table in Laserfiche Forms. Use custom JavaScript to dynamically color rows or add rows to the table." />
    </head>
    <body>
        <h1>Customizing Tables</h1>
        <p>This topic provides principles and examples for customizing tables in a form.</p>
        <h2>Selectors for Table Elements</h2>
        <p>Fields in <a href="../Form-Fields/Table.htm" title="Click here to learn more." alt="Click here to learn more.">tables</a> are not fundamentally different from other fields, apart from the format of their ids. While standalone fields have IDs of the format <code>Field<i>FieldNumber</i></code>, tables have IDs of the format <code>Field<i>Number</i>(<i>RowNumber</i>)</code>. Every field in the same column has the same <i>Number</i>. The <i>RowNumber</i>s start from 1 and increase by 1 for each row. Suppose I want to target the entry that is in the third row, in the column with entry IDs starting with <code>Field19</code>. The ID for this field would be <code>Field19(3)</code>. The following screenshot shows how you can find out what <i>Number</i> and <i>RowNumber</i> using Chrome's Developer Tools.</p>
        <p>
            <img src="../Resources/Images/forms_table-field-id.PNG" style="border-style: solid;border-width: 1px;width: 814px;height: 610px;" alt="Viewing the HTML corresponding to a cell in a table." title="To select all fields in column, you can use the JavaScript selector that looks for a string starting with a specific substring." />
        </p>
        <h2 class="topicheading"><a name="Iteratin"></a>Iterating over Table Rows</h2>
        <p>In jQuery, you can iterate over all elements that satisfy a certain condition by using the <a href="http://api.jquery.com/each/" target="_blank"><code>$('<i>selector</i>').each()</code> function</a>. To specify the elements to iterate over, you would first use a selector, then append <code>.each</code> to the end of the selector. In the following screenshot, we can see that the table is within a <b>li</b> element with class <code>cf-table-block</code>. The rows are specified within the body of the table, that is, within the <b>tbody</b> element. In this element, each row is represented by its own <b>tr</b> element.  All tables have the class <code>cf-table-block</code>. If you want to implement a customization on a specific table, and you have more than one table on your form, you should <a href="CSS Selectors.htm#Adding">assign a custom class</a> to that table, then use that class' name in place of <code>cf-table-block</code>.</p>
        <p>
            <img src="../Resources/Images/forms_table-container.PNG" style="border-style: solid;border-width: 1px;width: 796px;height: 302px;" alt="The HTML li element corresponding to an entire table." title="The individual rows are descendants of the table's element." />
        </p>
        <p>As an example, we show you how to color each row in a table depending on the radio button selection in that row. It shows you how the <code>.each</code> function may be used.</p>
        <h4>Coloring rows based on radio button selection</h4>
        <p>This JavaScript snippet causes a table row to be colored gray when "choice 1" is selected, and white when it is not.</p><pre xml:space="preserve" class="Code"><code class="language-javascript">$(document).ready(function () {
  
  rowcolorchange();
  
  $('.RadioTable').on('change','[type="radio"]', rowcolorchange);
  
  function rowcolorchange() {
    $('.RadioTable tbody tr').each(function () {
      $(this).find('input:checked').each(function () {
        if ($(this).val() == "choice 1"){
          $(this).closest('tr').css("background-color", "#cccccc");
        }else{
          $(this).closest('tr').css("background-color", "#ffffff");
        }
      });
    });
  }
  
});</code></pre>
        <p>The central piece of the code is the function <code>rowcolorchange</code>. This function uses the <code>.each</code> iterator to iterate over all elements that are within an element of class <code>RadioTable</code>, within a <b>tbody</b> element, and within a <b>tr</b> element. The custom class <code>RadioTable</code> should be <a href="CSS Selectors.htm#Adding">assigned to your table</a> in the form designer for this code to work.</p>
        <p>Within each row, the program searches for an <b>input</b> element that is selected. If that element has the value "choice 1", the row is assigned a gray background color. Otherwise, the row is assigned a white background color. The <code>.closest</code> function ensures that the program searches for the closest <b>tr</b> element that is an ancestor of the input area, and colors that the appropriate color.</p>
        <p>When the code runs successfully, the table should look  like this:</p>
        <p>
            <img src="../Resources/Images/forms_table-dynamic-row-color.PNG" style="border-style: solid;border-width: 1px;" alt="Table where the rows are colored according to which radio button us selected in one column." title="This table behavior can be helpful if the choice users make in one column affects how they should fill in the other columns." />
        </p>
        <h2 class="topicheading">Color Odd Rows of Table</h2>
        <p>The following JavaScript snippet assigns a non-white color to all odd-numbered rows in a table. It works for both tables with a fixed number of rows and tables where the user can append additional rows. It requires you to first <a href="CSS Selectors.htm#Adding">assign the class</a> <code>rowcolortable</code> to the table.</p>
        <p>
            <MadCap:concept term="Forms" />In a table, each row is represented by a <b>tr</b> element. The function <code>altColor</code> assigns the color <b>#ff0000</b> (red) to all "odd" <b>tr</b> elements, meaning the first element, third element, fifth element, and so on. It also assigns the color <b>#ffffff</b> (the default white) to all "even" <b>tr</b> elements.</p>
        <p>The rest of the code specifies the events that cause <code>altColor</code> to be called. When the document is loaded, <code>altColor</code> is called immediately, to color any existing table rows. When the user clicks on the button that adds a new row, <code>altColor</code> is called again, to color any new rows added. This button is identified by its class, <code>cf-table-add-row</code>. When the user clicks on the button that removes a row, <code>altColor</code> is called. This button is identified by the class <code>form-del-field</code>.</p><pre xml:space="preserve" class="Code"><code class="language-javascript">$(document).ready(function() {
  
  altColor();

  $('.rowcolortable').on('click', '.form-del-field', function () {
    altColor();
  });
  
  $('.rowcolortable').on('click', '.cf-table-add-row', function () {
    altColor();
  });
  
  function altColor() {
    $("tr:odd").css("background-color", "#ff0000");
    $("tr:even").css("background-color", "#ffffff");
  }
});</code></pre>
        <p>An example of what a table colored this way looks like:</p>
        <p>
            <img src="../Resources/Images/forms_table-alt-row-color.PNG" style="border-style: solid;border-width: 1px;" alt="A table where the odd rows are colored red and the even rows are the default white." title="This can help you customize your table to fit your organization's branding." />
        </p>
        <h2 class="topicheading">Dynamically Create Table Rows</h2>
        <p>When you create a table, you can set it to have a variable number of rows and have users click an "Add" button to add more rows. However, sometimes you may want to add a number of rows that depends on a variable that is specified elsewhere on the form. The following sample shows you how to do this with JavaScript. A certain integer is specified on a form field (in a real-world scenario, this is something that may be derived from a formula based on other fields), and the JavaScript automatically ensures that the table has a number of rows equal to that integer.</p>
        <p>The expected behavior of the form can be seen in the following animation. After a number of days is entered in one field, the table adjusts to have the same number of rows as the number of days specified. This happens once the user moves away from the "Number of Days" field.</p>
        <p>
            <img src="../Resources/Images/forms_table-add-rows-dynamic.gif" />
        </p>
        <p>The JavaScript used for this was the following:</p><pre xml:space="preserve" class="Code"><code class="language-javascript">$(document).ready(function(){
  $('.numberDays input').change(function(){ 
    var rowNumber = $(this).val();
    $('.myTable .form-del-field').trigger('click');
    for (i=0; i&lt;rowNumber; i++){
      $('.myTable .cf-table-add-row').trigger('click');
    }
  })
});</code></pre>
        <p>The "Number of Days" field was assigned the <a href="CSS Selectors.htm#Adding">custom class</a> <code>numberDays</code>. The table was assigned the custom class <code>myTable</code>. When the document has loaded, the script waits for a change to the <code>numberDays</code> field. It then stores the value of <code>numberDays</code> as the variable <code>rowNumber</code>. It deletes all existing rows except the first one in the table—by triggering a click on all the "X" buttons that delete a row. Then, it adds the required number of rows  by triggering clicks on the "Add" button.</p>
    </body>
</html>