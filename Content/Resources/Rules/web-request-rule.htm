<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
    </head>
    <body>
        <h1>Web Request Rule</h1>
        <p>A Web Request Rule allows you to send an HTTP request to a <a href="../Integrations/Web-Services.htm" title="Click here to learn more." alt="Click here to learn more.">web service</a> or <a href="../Integrations/integrationplatform.htm">application connection</a> and process the response. </p>
        <p>Use the <b>Request</b> tab to configure the request URI, request method, and appropriate request headers, and content body.</p>
        <p>Use the <b>Response</b> tab to configure how to handle the response from the request.</p>
        <p style="font-weight: bold;">To create a new web request rule:</p>
        <ol>
            <li>On the <b>Rules</b> page, select the arrow beside <b>New</b> and select <b>Web request</b> as your rule type.</li>
            <li>In the Create Web Request Rule dialog box, specify the <b>Name</b> and <b>Description</b> for your rule.</li>
            <li>Select either <b>Web Service Connection</b> or <b>Application Connection</b>. </li>
            <li>Select the <a href="../Integrations/Web-Services.htm" title="Click here to learn more." alt="Click here to learn more.">web service</a> or <a href="../Integrations/integrationplatform.htm">application connection</a> that you want access.</li>
            <li>Click <b>Create</b>.<ol><li>On the <b>Request</b> tab, craft the content of the request. <ul><li>Append additional parameters as needed to the URI. You can add Laserfiche tokens that can be filled in by a workflow when running the rule.</li><li>Select from one of the following HTTP request methods:<ul><li>Get</li><li>Head</li><li>Post</li><li> Put</li><li>Patch</li><li>Delete</li></ul></li><li>Add HTTP&#160;request headers as required for the web service endpoint.</li><li>For Post and Put requests, craft the content body.</li><li>Use <b>Test Web Request</b>, to test the request works as you expect. The Response tab will display the response of the test. <br /></li></ul></li></ol></li>
            <li>On the <b>Response</b> tab, configure how to process the returned response. Add tokens that will be used by the processes using the response. <ul><li>If the Test Web Request automated data is unavailable or otherwise unsuitable for the following steps, you may build a manual response by clicking the <b>edit response here</b> link when an HTTP response type is selected. Provide a status message, response header, and response body in standard JSON response format.</li></ul><ol><li>Select JSON from the Parse Type menu in the top right corner of the response window.</li><li>To add output tokens containing information from the header:<ol><li>Click the <b>+ Add output token</b> to create a new token within the <b>HTTP&#160;Headers</b> area.</li><li>Provide a token name for use by the process that will receive the data.</li><li>Select the header element from the dropdown</li></ol></li><li>To add output tokens containing information from the body of the response:<ol><li>Click the <b>+ Add output token</b> to create a new token within the <b>Response Body</b> area.</li><li>Provide a token name for use by the process that will receive the data.</li><li>Create a JSONPath expression to retrieve the data  desired. If the expression retrieves data from the sample response, a preview of the data will be displayed.<p class="note"><b>Note:</b> The parser accepts a standard JSONPath expression that uses dot-notation. For example, <code>$.store.book[0].title</code></p></li></ol></li></ol></li>
            <p class="note"><b>Note:</b> Tokens may contain either single or multi-value return values.</p>
            <li>Add a <a href="../Workflow/Activities/Run-Web-Request-Rule.htm" title="Click here to learn more." alt="Click here to learn more.">Run Web Request Rule</a> or a <a href="../../Resources/BusinessProcesses/Service-Tasks.htm" alt="Link to Service Tasks page">Rules Service Task</a> activity to your processes.
</li>
        </ol>
        <p class="note"><b>Note:</b> Publish the rule to make it available for use in process automation workflows.</p>
        <h1>&#160;</h1>
        <h1>Content Body Considerations</h1>
        <ul>
            <li>
                <p>For <b>Post, </b><b>Put, </b>and<b> Patch</b> requests, craft the content body.</p>
            </li>
            <li>
                <p>For <b>File_Upload</b> requests, select <b>Content Type</b> as <i>[multipart/form-data]</i> and craft the multipart content body.</p>
                <p>
                    <p class="note"><b>Note:</b> The default file content encoding is base64 string. To upload the file under binary encoding you must add <code>Content-Transfer-Encoding: binary</code></p>
                </p>
                <p>
                    <h3 class="subheader"><b>Example</b>
                    </h3>
                    <p class="ex">--aaa<br />Content-Disposition: form-data; name="%(Name: FileName; Type: Text)"; filename="%(Name: FileName; Type: Text)"<br />Content-Type: application/pdf<br /><b>Content-Transfer-Encoding: binary</b><br /><br />%(Name: InvoiceFile; Type: File)<br />--aaa--<br /></p>
                </p>
            </li>
            <li>
                <p>Click <b>Test Web Request</b> to ensure the request works as you expect. The <b>Response</b> tab will display the response of the test.</p>
            </li>
        </ul>
    </body>
</html>