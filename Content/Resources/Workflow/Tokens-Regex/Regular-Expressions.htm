<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:conditions="Default.Complete">
    <head>
    </head>
    <body>
        <h1>Regular Expressions</h1>
        <p>Regular expressions are characters that define a search pattern. They can be used to identify or format data. Use the <a href="../Activities/Pattern-Matching.htm" title="Click here to learn more." alt="Click here to learn more.">Pattern Matching</a> activity to test a regular expression. </p>
        <h2>Character Classes</h2>
        <p>Matches any <i>one</i> of a set of characters.</p>
        <table id="myTable" class="tablesorter" border="0">
            <caption>Character Classes</caption>
            <col>
            </col>
            <col>
            </col>
            <thead>
                <tr>
                    <th><b>Regular Expression</b>
                    </th>
                    <th><b>Description</b>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="tabletext">.</td>
                    <td class="tabletext">Matches any character except "\n". For example, the pattern "a.e" matches "ave" in "have" and "ate"&#160;in "water". To match a period character ".", precede the period with the escape character "\" to produce "\.".</td>
                </tr>
                <tr>
                    <td class="tabletext">[]</td>
                    <td class="tabletext">Matches any character in a set of characters. The characters are case-sensitive. For example, the pattern "[as]" matches "a"&#160;and "s" in "Laserfiche".</td>
                </tr>
                <tr>
                    <td class="tabletext">[^]</td>
                    <td class="tabletext">Matches any character <i>not</i> in a set of characters. The characters are case-sensitive. For example, the pattern "[^as]" matches "L", "r", "f", "i", "c", and "h", and "e"&#160;twice in "Laserfiche".</td>
                </tr>
                <tr>
                    <td class="tabletext">-</td>
                    <td class="tabletext">Matches any single character in the range from left to right. For example, the pattern "[A-X]" matches "X" in "XY".</td>
                </tr>
                <tr>
                    <td class="tabletext">\p{}</td>
                    <td class="tabletext">Matches any single character in <a target="_blank" href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions#unicode-category-or-unicode-block-p">the Unicode category</a>. For example, the pattern "\p{IsCyrillic}" matches "Д" in "ДA".</td>
                </tr>
                <tr>
                    <td class="tabletext">\P{}</td>
                    <td class="tabletext">Matches any single character <i>not</i> in <a target="_blank" href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions#negative-unicode-category-or-unicode-block-p">the Unicode category</a>. For example, the pattern "\p{IsCyrillic}" matches "A" in "ДA".</td>
                </tr>
                <tr>
                    <td class="tabletext">\w</td>
                    <td class="tabletext">Matches any word character. For example, the pattern "\w" matches "A", "B", "1", and "2"&#160;in "AB 1.2".</td>
                </tr>
                <tr>
                    <td class="tabletext">\W</td>
                    <td class="tabletext">Matches any <i>non</i>-word character. For example, the pattern "\W" matches " " (blank space) and "." in "AB 1.2".</td>
                </tr>
                <tr>
                    <td class="tabletext">\s</td>
                    <td class="tabletext">Matches any white-space character. For example, the pattern "\s" matches " " (blank space) in "AB 1.2".</td>
                </tr>
                <tr>
                    <td class="tabletext">\S</td>
                    <td class="tabletext">Matches any non-white-space character. For example, the pattern "\s" matches "A", "B", "1", ".", and "2" in "AB 1.2".</td>
                </tr>
                <tr>
                    <td class="tabletext">\d</td>
                    <td class="tabletext">Matches any decimal digit. For example, the pattern "\d" matches "1", "2", "3", and "4" in "ab 1.234".</td>
                </tr>
                <tr>
                    <td class="tabletext">\D</td>
                    <td class="tabletext">Matches any non-decimal digit. For example, the pattern "\D" matches "a", "b", " " (blank space), and "." in "ab 1.234".</td>
                </tr>
            </tbody>
        </table>
        <h2>Quantifiers</h2>
        <p>Matches a specified number of elements.</p>
        <table id="myTable2" class="tablesorter" border="0">
            <caption>Quantifiers</caption>
            <col>
            </col>
            <col>
            </col>
            <thead>
                <tr>
                    <th><b>Regular Expression</b>
                    </th>
                    <th><b>Description</b>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="tabletext">*</td>
                    <td class="tabletext" style="font-weight: normal;">
                        Matches the previous element zero or more times. For example, the pattern "d*" matches "d" twice in "1dad".
                    </td>
                </tr>
                <tr>
                    <td class="tabletext">+</td>
                    <td class="tabletext" style="font-weight: normal;">
                        Matches the previous element one or more times. For example, the pattern "to+" matches "to"&#160;in "tough" and "too" in "tooth".
                    </td>
                </tr>
                <tr>
                    <td class="tabletext">?</td>
                    <td class="tabletext" style="font-weight: normal;">
                        Matches the previous element zero or one time. For example, the pattern "card?" matches "card" in "cards" and "car" in "cars".
                    </td>
                </tr>
                <tr>
                    <td class="tabletext">{n}</td>
                    <td class="tabletext" style="font-weight: normal;">
                        Matches the previous element n times. For example, the pattern ",\d{3}" matches ",234" and ",567" in "1,234,567.890".                    </td>
                </tr>
                <tr>
                    <td class="tabletext">{n,}</td>
                    <td class="tabletext" style="font-weight: normal;">
                        Matches the previous element at least n times. For example, the pattern "\d{2,}" matches "11" and "24" in "11.24".
                    </td>
                </tr>
                <tr>
                    <td class="tabletext">{n,m}</td>
                    <td class="tabletext" style="font-weight: normal;">
                        Matches the previous element at least n times, but no more than m times. For example, the pattern "\d{2,4}" matches "113" and "2444" in "113.2444".
                    </td>
                </tr>
            </tbody>
        </table>
        <h2>Grouping Constructs</h2>
        <p>Groups regular expressions to capture sub strings of a string.</p>
        <table id="myTable3" class="tablesorter" border="0">
            <caption>Grouping Constructs</caption>
            <col>
            </col>
            <col>
            </col>
            <thead>
                <tr>
                    <th><b>Regular Expression</b>
                    </th>
                    <th><b>Description</b>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="tabletext">()</td>
                    <td class="tabletext" style="font-weight: normal;">
                        Matches the exact expression in the parentheses. For example, the pattern "(1-3)" matches "1-3" in "1-34", but nothing in "1".
                    </td>
                </tr>
                <tr>
                    <td class="tabletext">(?:)</td>
                    <td class="tabletext" style="font-weight: normal;">
                        Creates a group that will not capture the string matched by the group.
                    </td>
                </tr>
                <tr>
                    <td class="tabletext">(?&lt;&gt;)</td>
                    <td class="tabletext" style="font-weight: normal;">Creates a named capture group for future use in the regular expression.</td>
                </tr>
                <tr>
                    <td class="tabletext">\k&lt;&gt;</td>
                    <td class="tabletext" style="font-weight: normal;">References a named capture group created in the expression. Matches the string captured by that capture group.</td>
                </tr>
            </tbody>
        </table>
        <h2>Character Escapes</h2>
        <p>Matches a special or literal character using a backslash character (\).</p>
        <table id="myTable4" class="tablesorter" border="0">
            <caption>Character Escapes</caption>
            <col>
            </col>
            <col>
            </col>
            <thead>
                <tr>
                    <th><b>Regular Expression</b>
                    </th>
                    <th><b>Description</b>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="tabletext">\a</td>
                    <td class="tabletext" style="font-weight: normal;">
                        Matches a bell character (\u0007).
                    </td>
                </tr>
                <tr>
                    <td class="tabletext">\t</td>
                    <td class="tabletext" style="font-weight: normal;">
                        Matches a tab (\u0009).
                    </td>
                </tr>
                <tr>
                    <td class="tabletext">\v</td>
                    <td class="tabletext" style="font-weight: normal;">
                       Matches a vertical tab (\u000B).
                    </td>
                </tr>
                <tr>
                    <td class="tabletext">\f</td>
                    <td class="tabletext" style="font-weight: normal;">
                        Matches a form feed (\u000C).
                    </td>
                </tr>
                <tr>
                    <td class="tabletext">\n</td>
                    <td class="tabletext" style="font-weight: normal;">
                        Matches a new line (\u000A).
                    </td>
                </tr>
                <tr>
                    <td class="tabletext">\r</td>
                    <td class="tabletext" style="font-weight: normal;">
                        Matches a carriage return (\u000D).
                    </td>
                </tr>
                <tr>
                    <td class="tabletext">\e</td>
                    <td class="tabletext" style="font-weight: normal;">
                        Matches an escape (\u001B).                    </td>
                </tr>
                <tr>
                    <td class="tabletext">\040</td>
                    <td class="tabletext" style="font-weight: normal;">Matches an ASCII character as octal. </td>
                </tr>
                <tr>
                    <td class="tabletext">\x20</td>
                    <td class="tabletext" style="font-weight: normal;">Matches an ASCII character using hexadecimal representation.</td>
                </tr>
                <tr>
                    <td class="tabletext">\c</td>
                    <td class="tabletext" style="font-weight: normal;">Matches an ASCII control character.</td>
                </tr>
                <tr>
                    <td class="tabletext">\\</td>
                    <td class="tabletext" style="font-weight: normal;">Matches a backslash.</td>
                </tr>
            </tbody>
        </table>
        <h2>Metacharacters</h2>
        <p>Matches or does not match depending on the position in the string.</p>
        <table id="myTable5" class="tablesorter" border="0">
            <caption>Character Escapes</caption>
            <col>
            </col>
            <col>
            </col>
            <thead>
                <tr>
                    <th><b>Regular Expression</b>
                    </th>
                    <th><b>Description</b>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="tabletext">^</td>
                    <td class="tabletext" style="font-weight: normal;">
                        Matches the matched item at the beginning of the string. For example, the pattern "^\d{2}" matches "12" in "12-34".
                    </td>
                </tr>
                <tr>
                    <td class="tabletext">$</td>
                    <td class="tabletext" style="font-weight: normal;">
                        Matches the matched item at the end of the string or before "\n" at the end of the string. For example, the pattern "\d{2}$" matches "34" in "12-34".
                    </td>
                </tr>
                <tr>
                    <td class="tabletext">\A</td>
                    <td class="tabletext" style="font-weight: normal;">
                      Matches the matched item at the beginning of the string. For example, the pattern "\A\d{2}" matches "12" in "12-34".
                    </td>
                </tr>
                <tr>
                    <td class="tabletext">\Z</td>
                    <td class="tabletext" style="font-weight: normal;">
                       Matches the matched item at the end of the string or before "\n" at the end of the string. For example, the pattern "\d{2}\Z" matches "34" in "12-34".
                    </td>
                </tr>
                <tr>
                    <td class="tabletext">\G</td>
                    <td class="tabletext" style="font-weight: normal;">
                       Matches only the item at the point where the previous match ended. For example, the pattern "\G\(\d\)" matches "(1)" and "(2)" in "(1)(2)[3](4)", but matches only "(1)" in "(1) (2)[3](4)".
                    </td>
                </tr>
                <tr>
                    <td class="tabletext">\b</td>
                    <td class="tabletext" style="font-weight: normal;">
                       Matches the item on a boundary between a "\w" and a "\W". It also matches any item at the start or end of a line. For example, the pattern "\b\w" matches "s" twice in sea shells. The pattern "\w\b" matches "w" once in the workflow.
                    </td>
                </tr>
                <tr>
                    <td class="tabletext">\B</td>
                    <td class="tabletext" style="font-weight: normal;">
                        Matches the matched item that does not occur on a "\b" boundary. For example, the pattern "\B\w" matches "a", "h", and "s" and "e" and "l" twice in "sea shells".
                    </td>
                </tr>
            </tbody>
        </table>
        <h2>Alternations</h2>
        <p>Modifies a regular expression to allow either-or matching.</p>
        <table id="myTable6" class="tablesorter" border="0">
            <caption>Alternations</caption>
            <col>
            </col>
            <col>
            </col>
            <thead>
                <tr>
                    <th><b>Regular Expression</b>
                    </th>
                    <th><b>Description</b>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="tabletext">|</td>
                    <td class="tabletext" style="font-weight: normal;">
                        Matches any single element in the items separated by the vertical bar "|" character. For example, the pattern "c(ar|haracter|all)" matches "car" and "character" in "This car has character".
                    </td>
                </tr>
            </tbody>
        </table>
        <h2>Options</h2>
        <p>Sets or disables miscellaneous options.</p>
        <table id="myTable7" class="tablesorter" border="0">
            <caption>Options</caption>
            <col>
            </col>
            <col>
            </col>
            <thead>
                <tr>
                    <th><b>Regular Expression</b>
                    </th>
                    <th><b>Description</b>
                    </th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="tabletext">(?i)</td>
                    <td class="tabletext" style="font-weight: normal;">Disables case-sensitive matching.</td>
                </tr>
                <tr>
                    <td class="tabletext">(?m)</td>
                    <td class="tabletext" style="font-weight: normal;">Enables multiline mode.</td>
                </tr>
                <tr>
                    <td class="tabletext">(?n)</td>
                    <td class="tabletext" style="font-weight: normal;">Enables explicit capture.</td>
                </tr>
                <tr>
                    <td class="tabletext">(?s)</td>
                    <td class="tabletext" style="font-weight: normal;">Enables single-line mode.</td>
                </tr>
                <tr>
                    <td class="tabletext">(?x)</td>
                    <td class="tabletext" style="font-weight: normal;">Enables ignoring whitespace in a regular expression.</td>
                </tr>
                <tr>
                    <td class="tabletext">(?-i)</td>
                    <td class="tabletext" style="font-weight: normal;">Enables case-sensitive matching.</td>
                </tr>
                <tr>
                    <td class="tabletext">(?-m)</td>
                    <td class="tabletext" style="font-weight: normal;">Disables multiline mode.</td>
                </tr>
                <tr>
                    <td class="tabletext">(?-n)</td>
                    <td class="tabletext" style="font-weight: normal;">Disables explicit capture.</td>
                </tr>
                <tr>
                    <td class="tabletext">(?-s)</td>
                    <td class="tabletext" style="font-weight: normal;">Disables single-line mode.</td>
                </tr>
                <tr>
                    <td class="tabletext">(?-x)</td>
                    <td class="tabletext" style="font-weight: normal;">Disables ignoring whitespace in a regular expression.</td>
                </tr>
            </tbody>
        </table>
    </body>
</html>